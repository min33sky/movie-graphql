{"version":3,"sources":["apolloClient.js","queries.js","components/Movie.js","components/Detail.js","components/Home.js","globalStyles.js","App.js","serviceWorker.js","index.js"],"names":["client","ApolloClient","uri","HOME_PAGE","gql","_templateObject","MOVIE_DETAILS","_templateObject2","Card","styled","div","Movie_templateObject","props","concat","background","Title","span","Movie_templateObject2","Movie","_ref","id","title","rating","poster","react_default","a","createElement","Link","to","Container","Detail_templateObject","Image","Detail_templateObject2","withComponent","_templateObject3","Paragraph","_templateObject4","bold","MovieContainer","_templateObject5","Detail","movieId","match","params","react_apollo_browser_umd","query","variables","parseInt","_ref2","loading","data","error","Fragment","Helmet","movie","src","medium_cover_image","Detail_Title","description_intro","suggestions","map","components_Movie","key","Home_templateObject","Home","Home_Container","movies","GlobalStyle","createGlobalStyle","globalStyles_templateObject","reset","App","HashRouter","Route","exact","path","component","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7b5237d.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://movie-gql.herokuapp.com/'\r\n});\r\n\r\nexport default client;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const HOME_PAGE = gql`\r\n  {\r\n    movies(rating: 7, limit: 50) {\r\n      id\r\n      title\r\n      rating\r\n      description_intro\r\n      genres\r\n      language\r\n      medium_cover_image\r\n    }\r\n  }\r\n`;\r\n\r\n// 아폴로에서만 작동하는 쿼리\r\nexport const MOVIE_DETAILS = gql`\r\n  query getMovieDetails($movieId: Int!) {\r\n    movie(id: $movieId) {\r\n      medium_cover_image\r\n      title\r\n      rating\r\n      description_intro\r\n      language\r\n      genres\r\n    }\r\n    suggestions(id: $movieId) {\r\n      id\r\n      title\r\n      rating\r\n      medium_cover_image\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  border-radius: 15px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n  background-image: ${props => `url(${props.background})`};\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 300px;\r\n  width: 200px;\r\n  margin-bottom: 40px;\r\n  position: relative;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  background-color: white;\r\n  width: auto;\r\n  padding: 10px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n  position: absolute;\r\n  bottom: 25px;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n`;\r\n\r\nconst Movie = ({ id, title, rating, poster }) => (\r\n  <Link to={`/details/${id}`}>\r\n    <Card background={poster}>\r\n      <Title>\r\n        {title} / {rating}\r\n        ⭐️\r\n      </Title>\r\n    </Card>\r\n  </Link>\r\n);\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number.isRequired,\r\n  poster: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { MOVIE_DETAILS } from '../queries';\r\nimport { Helmet } from 'react-helmet';\r\nimport Movie from './Movie';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  box-shadow: 0 10 20 rgba(0, 0, 0, 0.19) 0 6 6 rgba(0, 0, 0, 0.23);\r\n  background: white;\r\n  border-radius: 7px;\r\n`;\r\n\r\nconst Image = Card.withComponent('img');\r\n\r\nconst Title = styled.div`\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Paragraph = styled.div`\r\n  margin-bottom: 10px;\r\n  display: block;\r\n  font-weight: ${props => (props.bold ? '500' : '400')};\r\n`;\r\n\r\nconst MovieContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 0.7fr);\r\n  flex-wrap: wrap;\r\n  justify-items: center;\r\n  margin-top: 50px;\r\n`;\r\n\r\nconst Detail = ({\r\n  match: {\r\n    params: { movieId }\r\n  }\r\n}) => (\r\n  <Query query={MOVIE_DETAILS} variables={{ movieId: parseInt(movieId) }}>\r\n    {({ loading, data, error }) => {\r\n      if (loading) {\r\n        return (\r\n          <>\r\n            <Helmet>\r\n              <title>Loading | MovieQL</title>\r\n            </Helmet>\r\n          </>\r\n        );\r\n      }\r\n      if (error) return 'error';\r\n      return (\r\n        <>\r\n          <Container>\r\n            <Helmet>\r\n              <title>{data.movie.title} | MovieQL</title>\r\n            </Helmet>\r\n            <Image src={data.movie.medium_cover_image} />\r\n            <span>\r\n              <Title>{data.movie.title}</Title>\r\n              <Paragraph bold>Rating: {data.movie.rating}⭐ </Paragraph>\r\n              <Paragraph>{data.movie.description_intro}</Paragraph>\r\n            </span>\r\n          </Container>\r\n          <Title>Suggested</Title>\r\n          <MovieContainer>\r\n            {data.suggestions.map(movie => (\r\n              <Movie\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.title}\r\n                rating={movie.rating}\r\n                poster={movie.medium_cover_image}\r\n              />\r\n            ))}\r\n          </MovieContainer>\r\n        </>\r\n      );\r\n    }}\r\n  </Query>\r\n);\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Query } from 'react-apollo'; // 리액트와 아폴로를 연결\r\nimport { HOME_PAGE } from '../queries';\r\nimport Movie from './Movie';\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 0.7fr);\r\n  flex-wrap: wrap;\r\n  justify-items: center;\r\n`;\r\n\r\nconst Home = () => (\r\n  <Container>\r\n    <Query query={HOME_PAGE}>\r\n      {({ loading, data, error }) => {\r\n        if (error) return 'Error...';\r\n        else if (loading) return 'Loading....';\r\n        return data.movies.map(movie => (\r\n          <Movie\r\n            id={movie.id}\r\n            key={movie.id}\r\n            poster={movie.medium_cover_image}\r\n            title={movie.title}\r\n            rating={movie.rating}\r\n          />\r\n        ));\r\n      }}\r\n    </Query>\r\n  </Container>\r\n);\r\n\r\nexport default Home;\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\nexport const GlobalStyle = createGlobalStyle`\r\n  @import url(https://fonts.googleapis.com/css?family=Maven+Pro);\r\n  ${reset};\r\n\r\n  body {\r\n    font-family: 'Maven Pro', sans-serif;\r\n    background: #ecf0f1;\r\n  }\r\n\r\n  a {\r\n    color:inherit;\r\n  }\r\n\r\n  main {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport client from './apolloClient';\nimport { Home, Detail } from './components';\nimport { GlobalStyle } from './globalStyles';\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <>\n            <GlobalStyle />\n            <main>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/details/:movieId\" component={Detail} />\n            </main>\n          </>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}